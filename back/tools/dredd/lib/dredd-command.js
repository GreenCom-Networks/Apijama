// Generated by CoffeeScript 1.12.5
var Dredd, DreddCommand, applyLoggingOptions, configUtils, console, exports, fs, interactiveConfig, logger, optimist, os, packageData, path, spawn, spawnArgs, spawnSync;

path = require('path');

optimist = require('optimist');

fs = require('fs');

os = require('os');

spawnArgs = require('spawn-args');

spawnSync = require('cross-spawn').sync;

console = require('console');

Dredd = require('./dredd');

interactiveConfig = require('./interactive-config');

applyLoggingOptions = require('./configuration').applyLoggingOptions;

configUtils = require('./config-utils');

spawn = require('./child-process').spawn;

logger = require('./logger');

packageData = require('../package.json');

DreddCommand = (function() {
  function DreddCommand(options, cb) {
    if (options == null) {
      options = {};
    }
    this.cb = cb;
    this.finished = false;
    this.exit = options.exit, this.custom = options.custom;
    this.setExitOrCallback();
    if (this.custom == null) {
      this.custom = {};
    }
    if (!this.custom.cwd || typeof this.custom.cwd !== 'string') {
      this.custom.cwd = process.cwd();
    }
    if (!this.custom.argv || !Array.isArray(this.custom.argv)) {
      this.custom.argv = [];
    }
  }

  DreddCommand.prototype.setOptimistArgv = function() {
    this.optimist = optimist(this.custom.argv, this.custom.cwd);
    this.cliArgv = this.optimist.argv;
    this.optimist.usage('Usage:\n  $ dredd init\n\nOr:\n  $ dredd <path or URL to API description document> <URL of tested server> [OPTIONS]\n\nExample:\n  $ dredd ./api-description.apib http://127.0.0.1:3000 --dry-run').options(Dredd.options).wrap(80);
    this.argv = this.optimist.argv;
    return this.argv = applyLoggingOptions(this.argv);
  };

  DreddCommand.prototype.stopServer = function(callback) {
    if (this.serverProcess == null) {
      logger.verbose('No backend server process to terminate.');
      return callback();
    }
    if (this.serverProcess.terminated) {
      logger.debug('The backend server process has already terminated');
      return callback();
    }
    logger.verbose('Terminating backend server process, PID', this.serverProcess.pid);
    this.serverProcess.terminate({
      force: true
    });
    return this.serverProcess.on('exit', function() {
      return callback();
    });
  };

  DreddCommand.prototype.setExitOrCallback = function() {
    if (!this.cb) {
      if (this.exit && (this.exit === process.exit)) {
        this.sigIntEventAdd = true;
      }
      if (this.exit) {
        return this._processExit = (function(_this) {
          return function(exitStatus) {
            logger.verbose("Exiting Dredd process with status '" + exitStatus + "'.");
            logger.debug('Using configured custom exit() method to terminate the Dredd process.');
            _this.finished = true;
            return _this.stopServer(function() {
              return _this.exit(exitStatus);
            });
          };
        })(this);
      } else {
        return this._processExit = (function(_this) {
          return function(exitStatus) {
            logger.verbose("Exiting Dredd process with status '" + exitStatus + "'.");
            logger.debug('Using native process.exit() method to terminate the Dredd process.');
            return _this.stopServer(function() {
              return process.exit(exitStatus);
            });
          };
        })(this);
      }
    } else {
      return this._processExit = (function(_this) {
        return function(exitStatus) {
          logger.verbose("Exiting Dredd process with status '" + exitStatus + "'.");
          logger.debug('Using configured custom callback to terminate the Dredd process.');
          _this.finished = true;
          if (_this.sigIntEventAdded) {
            if ((_this.serverProcess != null) && !_this.serverProcess.terminated) {
              logger.verbose('Killing backend server process before Dredd exits.');
              _this.serverProcess.signalKill();
            }
            process.removeEventListener('SIGINT', _this.commandSigInt);
          }
          _this.cb(exitStatus);
          return _this;
        };
      })(this);
    }
  };

  DreddCommand.prototype.moveBlueprintArgToPath = function() {
    if (!Array.isArray(this.argv['path'])) {
      return this.argv['path'] = this.argv['p'] = [this.argv['path']];
    }
  };

  DreddCommand.prototype.checkRequiredArgs = function() {
    var argError;
    argError = false;
    if (this.argv._[0] == null) {
      console.error("\nError: Must specify path to API description document.");
      argError = true;
    }
    if (this.argv._[1] == null) {
      console.error("\nError: Must specify URL of the tested API instance.");
      argError = true;
    }
    if (argError) {
      console.error("\n");
      this.optimist.showHelp(console.error);
      return this._processExit(1);
    }
  };

  DreddCommand.prototype.runExitingActions = function() {
    if (this.argv["_"][0] === "init" || this.argv.init === true) {
      logger.silly('Starting interactive configuration.');
      this.finished = true;
      return interactiveConfig.run(this.argv, (function(_this) {
        return function(config) {
          configUtils.save(config);
          console.log("");
          console.log("Configuration saved to dredd.yml");
          console.log("");
          if (config['language'] === "nodejs") {
            console.log("Run test now, with:");
          } else {
            console.log("Install hooks handler and run Dredd test with:");
          }
          console.log("");
          if (config['language'] === 'ruby') {
            console.log("  $ gem install dredd_hooks");
          } else if (config['language'] === 'python') {
            console.log("  $ pip install dredd_hooks");
          } else if (config['language'] === 'php') {
            console.log("  $ composer require ddelnano/dredd-hooks-php --dev");
          } else if (config['language'] === 'perl') {
            console.log("  $ cpanm Dredd::Hooks");
          } else if (config['language'] === 'go') {
            console.log("  $ go get github.com/snikch/goodman/cmd/goodman");
          }
          console.log("  $ dredd");
          console.log("");
          return _this._processExit(0);
        };
      })(this));
    } else if (this.argv.help === true) {
      logger.silly('Printing help.');
      this.optimist.showHelp(console.error);
      return this._processExit(0);
    } else if (this.argv.version === true) {
      logger.silly('Printing version.');
      console.log(packageData.name + " v" + packageData.version + " (" + (os.type()) + " " + (os.release()) + "; " + (os.arch()) + ")");
      return this._processExit(0);
    }
  };

  DreddCommand.prototype.loadDreddFile = function() {
    var configPath, key, ref, value;
    configPath = this.argv.config;
    logger.verbose('Loading configuration file:', configPath);
    if (configPath && fs.existsSync(configPath)) {
      logger.info("Configuration '" + configPath + "' found, ignoring other arguments.");
      this.argv = configUtils.load(configPath);
    }
    ref = this.cliArgv;
    for (key in ref) {
      value = ref[key];
      if (key !== "_" && key !== "$0") {
        this.argv[key] = value;
      }
    }
    return this.argv = applyLoggingOptions(this.argv);
  };

  DreddCommand.prototype.parseCustomConfig = function() {
    return this.argv.custom = configUtils.parseCustom(this.argv.custom);
  };

  DreddCommand.prototype.runServerAndThenDredd = function(callback) {
    var command, parsedArgs, waitMilis, waitSecs;
    if (this.argv['server'] == null) {
      logger.verbose('No backend server process specified, starting testing at once');
      return this.runDredd(this.dreddInstance);
    } else {
      logger.verbose('Backend server process specified, starting backend server and then testing');
      parsedArgs = spawnArgs(this.argv['server']);
      command = parsedArgs.shift();
      logger.verbose("Using '" + command + "' as a server command, " + (JSON.stringify(parsedArgs)) + " as arguments");
      this.serverProcess = spawn(command, parsedArgs);
      logger.info("Starting backend server process with command: " + this.argv['server']);
      this.serverProcess.stdout.setEncoding('utf8');
      this.serverProcess.stdout.on('data', function(data) {
        return process.stdout.write(data.toString());
      });
      this.serverProcess.stderr.setEncoding('utf8');
      this.serverProcess.stderr.on('data', function(data) {
        return process.stdout.write(data.toString());
      });
      this.serverProcess.on('signalTerm', function() {
        return logger.verbose('Gracefully terminating the backend server process');
      });
      this.serverProcess.on('signalKill', function() {
        return logger.verbose('Killing the backend server process');
      });
      this.serverProcess.on('crash', (function(_this) {
        return function(exitStatus, killed) {
          if (killed) {
            return logger.info('Backend server process was killed');
          }
        };
      })(this));
      this.serverProcess.on('exit', (function(_this) {
        return function() {
          return logger.info('Backend server process exited');
        };
      })(this));
      this.serverProcess.on('error', (function(_this) {
        return function(error) {
          logger.error('Command to start backend server process failed, exiting Dredd', error);
          return _this._processExit(2);
        };
      })(this));
      process.on('beforeExit', (function(_this) {
        return function() {
          if ((_this.serverProcess != null) && !_this.serverProcess.terminated) {
            logger.verbose('Killing backend server process before Dredd exits');
            return _this.serverProcess.signalKill();
          }
        };
      })(this));
      process.on('exit', (function(_this) {
        return function() {
          if ((_this.serverProcess != null) && !_this.serverProcess.terminated) {
            logger.verbose('Killing backend server process on Dredd\'s exit');
            return _this.serverProcess.signalKill();
          }
        };
      })(this));
      waitSecs = parseInt(this.argv['server-wait'], 10);
      waitMilis = waitSecs * 1000;
      logger.info("Waiting " + waitSecs + " seconds for backend server process to start");
      return this.wait = setTimeout((function(_this) {
        return function() {
          return _this.runDredd(_this.dreddInstance);
        };
      })(this), waitMilis);
    }
  };

  DreddCommand.prototype.logDebuggingInfo = function(config) {
    var err, npmVersion;
    logger.debug('Dredd version:', packageData.version);
    logger.debug('Node.js version:', process.version);
    logger.debug('Node.js environment:', process.versions);
    logger.debug('System version:', os.type(), os.release(), os.arch());
    try {
      npmVersion = spawnSync('npm', ['--version']).stdout.toString().trim();
      logger.debug('npm version:', npmVersion || 'unable to determine npm version');
    } catch (error1) {
      err = error1;
      logger.debug('npm version: unable to determine npm version:', err);
    }
    return logger.debug('Configuration:', JSON.stringify(config));
  };

  DreddCommand.prototype.run = function() {
    var configurationForDredd, e, i, len, ref, task;
    ref = [this.setOptimistArgv, this.parseCustomConfig, this.runExitingActions, this.loadDreddFile, this.checkRequiredArgs, this.moveBlueprintArgToPath];
    for (i = 0, len = ref.length; i < len; i++) {
      task = ref[i];
      task.call(this);
      if (this.finished) {
        return;
      }
    }
    configurationForDredd = this.initConfig();
    this.logDebuggingInfo(configurationForDredd);
    this.dreddInstance = this.initDredd(configurationForDredd);
    try {
      this.runServerAndThenDredd();
    } catch (error1) {
      e = error1;
      logger.error(e.message, e.stack);
      this.stopServer((function(_this) {
        return function() {
          return _this._processExit(2);
        };
      })(this));
    }
  };

  DreddCommand.prototype.lastArgvIsApiEndpoint = function() {
    this.server = this.argv._[this.argv._.length - 1];
    this.argv._.splice(this.argv._.length - 1, 1);
    return this;
  };

  DreddCommand.prototype.takeRestOfParamsAsPath = function() {
    this.argv['p'] = this.argv['path'] = this.argv['path'].concat(this.argv._);
    return this;
  };

  DreddCommand.prototype.initConfig = function() {
    var base, configuration;
    this.lastArgvIsApiEndpoint().takeRestOfParamsAsPath();
    configuration = {
      'server': this.server,
      'options': this.argv
    };
    if ((base = configuration.options).path == null) {
      base.path = [];
    }
    configuration.options.path.push(this.argv._[0]);
    configuration.custom = this.custom;
    return configuration;
  };

  DreddCommand.prototype.initDredd = function(configuration) {
    return new Dredd(configuration);
  };

  DreddCommand.prototype.commandSigInt = function() {
    logger.error('\nShutting down from keyboard interruption (Ctrl+C)');
    return this.dreddInstance.transactionsComplete((function(_this) {
      return function() {
        return _this._processExit(0);
      };
    })(this));
  };

  DreddCommand.prototype.runDredd = function(dreddInstance) {
    if (this.sigIntEventAdd) {
      this.sigIntEventAdded = !(this.sigIntEventAdd = false);
      process.on('SIGINT', this.commandSigInt);
    }
    logger.verbose('Running Dredd instance.');
    dreddInstance.run((function(_this) {
      return function(error, stats) {
        logger.verbose('Dredd instance run finished.');
        return _this.exitWithStatus(error, stats);
      };
    })(this));
    return this;
  };

  DreddCommand.prototype.exitWithStatus = function(error, stats) {
    if (error) {
      if (error.message) {
        logger.error(error.message);
      }
      process.exitCode = 1;
      return this._processExit(1);
    }
    if ((stats.failures + stats.errors) > 0) {
      process.exitCode = 1;
      this._processExit(1);
    } else {
      this._processExit(0);
    }
  };

  return DreddCommand;

})();

exports = module.exports = DreddCommand;
